{"version":3,"sources":["../src/OauthGithub.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;AACA;;;;;;;;IAEqB,U;AACnB,4BAAyC;AAAA,QAA3B,EAA2B,QAA3B,EAA2B;AAAA,QAAvB,MAAuB,QAAvB,MAAuB;AAAA,2BAAf,MAAe;AAAA,QAAf,MAAe,+BAAN,EAAM;;AAAA;;AACvC,0BAAO,EAAP,EAAW,sBAAX;AACA,0BAAO,MAAP,EAAe,0BAAf;AACA,SAAK,UAAL,GAAkB,OAAO,MAAP,GAAgB,CAAhB,GAAoB,YAAY,OAAO,IAAP,CAAY,KAAZ,CAAhC,GAAqD,EAAvE;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,YAAL,GAAoB,MAApB;AACA,SAAK,MAAL,GAAc,IAAd;AACD;;;;iCAEY,Q,EAAU;AAAA;;AACrB,oBAAI,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpB,cAAK,MAAL,GAAc,4BAAkB,EAAE,OAAO,GAAT,EAAc,QAAQ,GAAtB,EAA2B,oBAAoB,KAA/C,EAAlB,CAAd;AACA,YAAI,UAAU,wDAAwD,MAAK,QAA7D,GAAwE,MAAK,UAA3F;AACA,cAAK,MAAL,CAAY,OAAZ,CAAoB,OAApB;AACA,cAAK,MAAL,CAAY,WAAZ,CAAwB,EAAxB,CAA2B,eAA3B,EAA4C,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC1D,gBAAK,cAAL,CAAoB,GAApB,EAAyB,QAAzB;AACD,SAFD;AAGA,cAAK,MAAL,CAAY,WAAZ,CAAwB,EAAxB,CAA2B,0BAA3B,EAAuD,UAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAA2B;AAChF,gBAAK,cAAL,CAAoB,MAApB,EAA4B,QAA5B;AACD,SAFD;AAGA,cAAK,MAAL,CAAY,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5B,gBAAK,MAAL,GAAc,IAAd;AACD,SAFD,EAEG,KAFH;AAGD,OAbD;AAcD;;;mCAEc,G,EAAK,Q,EAAU;AAC5B,UAAI,WAAW,eAAe,IAAf,CAAoB,GAApB,KAA4B,IAA3C;AACA,UAAI,OAAQ,YAAY,SAAS,MAAT,GAAkB,CAA/B,GAAoC,SAAS,CAAT,CAApC,GAAkD,IAA7D;AACA,UAAI,QAAQ,gBAAgB,IAAhB,CAAqB,GAArB,CAAZ;;AAEA,UAAI,IAAJ,EAAU;AACR,aAAK,kBAAL,CAAwB,KAAK,QAA7B,EAAuC,KAAK,YAA5C,EAA0D,KAAK,UAA/D,EAA2E,IAA3E,EAAiF,QAAjF;AACD,OAFD,MAEO,IAAI,KAAJ,EAAW;AAChB,gBAAQ,GAAR,CAAY,KAAZ;AACD;AACF;;;uCAEkB,E,EAAI,M,EAAQ,M,EAAQ,I,EAAM,Q,EAAU;AACrD,2BAAQ,IAAR,CAAa,6CAAb,EAA4D;AAC1D,mBAAW,EAD+C;AAE1D,uBAAe,MAF2C;AAG1D,cAAM;AAHoD,OAA5D,EAIG,GAJH,CAIO,UAAC,GAAD,EAAM,QAAN,EAAmB;AACxB,YAAI,GAAJ,EAAS;AACP,mBAAS,GAAT;AACD;;AAED,YAAI,eAAe,SAAS,IAAT,CAAc,YAAjC;AACA,iBAAS,SAAS,IAAT,CAAc,YAAvB;AACD,OAXD;AAYD;;;;;;kBApDkB,U","file":"OauthGithub.js","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport { app, BrowserWindow } from 'electron';\nimport request from 'superagent';\n\nexport default class AuthWindow {\n  constructor({ id, secret, scopes = [] }) {\n    assert(id, 'Client ID is needed!');\n    assert(secret, 'Client Secret is needed!');\n    this.scopeQuery = scopes.length > 0 ? '&scope=' + scopes.join('%2C') : '';\n    this.clientId = id;\n    this.clientSecret = secret;\n    this.window = null;\n  }\n\n  startRequest(callback) {\n    app.on('ready', () => {\n      this.window = new BrowserWindow({ width: 800, height: 600, 'node-integration': false });\n      var authURL = 'https://github.com/login/oauth/authorize?client_id=' + this.clientId + this.scopeQuery;\n      this.window.loadURL(authURL);\n      this.window.webContents.on('will-navigate', (event, url) => {\n        this.handleCallback(url, callback);\n      });\n      this.window.webContents.on('did-get-redirect-request', (event, oldUrl, newUrl) => {\n        this.handleCallback(newUrl, callback);\n      });\n      this.window.on('close', () => {\n        this.window = null;\n      }, false);\n    });\n  }\n\n  handleCallback(url, callback) {\n    let raw_code = /code=([^&]*)/.exec(url) || null;\n    let code = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\n    let error = /\\?error=(.+)$/.exec(url);\n\n    if (code) {\n      this.requestGithubToken(this.clientId, this.clientSecret, this.scopeQuery, code, callback);\n    } else if (error) {\n      console.log(error);\n    }\n  }\n\n  requestGithubToken(id, secret, scopes, code, callback) {\n    request.post('https://github.com/login/oauth/access_token', {\n      client_id: id,\n      client_secret: secret,\n      code: code,\n    }).end((err, response) => {\n      if (err) {\n        callback(err);\n      }\n\n      var access_token = response.body.access_token;\n      callback(response.body.access_token);\n    });\n  }\n\n}\n"]}